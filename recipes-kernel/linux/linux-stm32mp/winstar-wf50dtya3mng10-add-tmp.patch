diff --git a/drivers/gpu/drm/panel/panel-ilitek-ili9881c.c b/drivers/gpu/drm/panel/panel-ilitek-ili9881c.c
index 534dd74..7df89f6 100644
--- a/drivers/gpu/drm/panel/panel-ilitek-ili9881c.c
+++ b/drivers/gpu/drm/panel/panel-ilitek-ili9881c.c
@@ -51,6 +51,8 @@ struct ili9881c {
 
 	struct regulator	*power;
 	struct gpio_desc	*reset;
+
+	bool                prepared;
 };
 
 #define ILI9881C_SWITCH_PAGE_INSTR(_page)	\
@@ -453,6 +455,400 @@ static const struct ili9881c_instr k101_im2byl02_init[] = {
 	ILI9881C_COMMAND_INSTR(0xD3, 0x3F), /* VN0 */
 };
 
+static const struct ili9881c_instr WF50DTYA3MNG10_init[] = {
+    ILI9881C_SWITCH_PAGE_INSTR(0x03),
+    //GIP_1
+    ILI9881C_COMMAND_INSTR(0x02, 0x00),
+
+    ILI9881C_COMMAND_INSTR(0x03, 0x73),
+
+    ILI9881C_COMMAND_INSTR(0x04, 0x00),
+
+    ILI9881C_COMMAND_INSTR(0x05, 0x00),
+
+    ILI9881C_COMMAND_INSTR(0x06, 0x0A),
+
+    ILI9881C_COMMAND_INSTR(0x07, 0x00),
+
+    ILI9881C_COMMAND_INSTR(0x08, 0x00),
+
+    ILI9881C_COMMAND_INSTR(0x09, 0x01),
+
+    ILI9881C_COMMAND_INSTR(0x0a, 0x00),
+
+    ILI9881C_COMMAND_INSTR(0x0b, 0x00),
+
+    ILI9881C_COMMAND_INSTR(0x0c, 0x01),
+
+    ILI9881C_COMMAND_INSTR(0x0d, 0x00),
+
+    ILI9881C_COMMAND_INSTR(0x0e, 0x00),
+
+    ILI9881C_COMMAND_INSTR(0x0f, 0x1D),
+
+    ILI9881C_COMMAND_INSTR(0x10, 0x1D),
+
+    ILI9881C_COMMAND_INSTR(0x11, 0x00),
+
+    ILI9881C_COMMAND_INSTR(0x12, 0x00),
+
+    ILI9881C_COMMAND_INSTR(0x13, 0x00),
+
+    ILI9881C_COMMAND_INSTR(0x14, 0x00),
+
+    ILI9881C_COMMAND_INSTR(0x15, 0x00),
+
+    ILI9881C_COMMAND_INSTR(0x16, 0x00),
+
+    ILI9881C_COMMAND_INSTR(0x17, 0x00),
+
+    ILI9881C_COMMAND_INSTR(0x18, 0x00),
+
+    ILI9881C_COMMAND_INSTR(0x19, 0x00),
+
+    ILI9881C_COMMAND_INSTR(0x1a, 0x00),
+
+    ILI9881C_COMMAND_INSTR(0x1b, 0x00),
+
+    ILI9881C_COMMAND_INSTR(0x1c, 0x00),
+
+    ILI9881C_COMMAND_INSTR(0x1d, 0x00),
+
+    ILI9881C_COMMAND_INSTR(0x1e, 0x40),
+
+    ILI9881C_COMMAND_INSTR(0x1f, 0x80),
+
+    ILI9881C_COMMAND_INSTR(0x20, 0x06),
+
+    ILI9881C_COMMAND_INSTR(0x21, 0x02),
+
+    ILI9881C_COMMAND_INSTR(0x22, 0x00),
+
+    ILI9881C_COMMAND_INSTR(0x23, 0x00),
+
+    ILI9881C_COMMAND_INSTR(0x24, 0x00),
+
+    ILI9881C_COMMAND_INSTR(0x25, 0x00),
+
+    ILI9881C_COMMAND_INSTR(0x26, 0x00),
+
+    ILI9881C_COMMAND_INSTR(0x27, 0x00),
+
+    ILI9881C_COMMAND_INSTR(0x28, 0x33),
+
+    ILI9881C_COMMAND_INSTR(0x29, 0x03),
+
+    ILI9881C_COMMAND_INSTR(0x2a, 0x00),
+
+    ILI9881C_COMMAND_INSTR(0x2b, 0x00),
+
+    ILI9881C_COMMAND_INSTR(0x2c, 0x00),
+
+    ILI9881C_COMMAND_INSTR(0x2d, 0x00),
+
+    ILI9881C_COMMAND_INSTR(0x2e, 0x00),
+
+    ILI9881C_COMMAND_INSTR(0x2f, 0x00),
+
+    ILI9881C_COMMAND_INSTR(0x30, 0x00),
+
+    ILI9881C_COMMAND_INSTR(0x31, 0x00),
+
+    ILI9881C_COMMAND_INSTR(0x32, 0x00),
+
+    ILI9881C_COMMAND_INSTR(0x33, 0x00),
+
+    ILI9881C_COMMAND_INSTR(0x34, 0x04),
+
+    ILI9881C_COMMAND_INSTR(0x35, 0x00),
+
+    ILI9881C_COMMAND_INSTR(0x36, 0x00),
+
+    ILI9881C_COMMAND_INSTR(0x37, 0x00),
+
+    ILI9881C_COMMAND_INSTR(0x38, 0x3C),
+
+    ILI9881C_COMMAND_INSTR(0x39, 0x00),
+
+    ILI9881C_COMMAND_INSTR(0x3a, 0x40),
+
+    ILI9881C_COMMAND_INSTR(0x3b, 0x40),
+
+    ILI9881C_COMMAND_INSTR(0x3c, 0x00),
+
+    ILI9881C_COMMAND_INSTR(0x3d, 0x00),
+
+    ILI9881C_COMMAND_INSTR(0x3e, 0x00),
+
+    ILI9881C_COMMAND_INSTR(0x3f, 0x00),
+
+    ILI9881C_COMMAND_INSTR(0x40, 0x00),
+
+    ILI9881C_COMMAND_INSTR(0x41, 0x00),
+
+    ILI9881C_COMMAND_INSTR(0x42, 0x00),
+
+    ILI9881C_COMMAND_INSTR(0x43, 0x00),
+
+    ILI9881C_COMMAND_INSTR(0x44, 0x00),
+
+    //GIP_2
+    ILI9881C_COMMAND_INSTR(0x50, 0x01),
+
+    ILI9881C_COMMAND_INSTR(0x51, 0x23),
+
+    ILI9881C_COMMAND_INSTR(0x52, 0x45),
+
+    ILI9881C_COMMAND_INSTR(0x53, 0x67),
+
+    ILI9881C_COMMAND_INSTR(0x54, 0x89),
+
+    ILI9881C_COMMAND_INSTR(0x55, 0xab),
+
+    ILI9881C_COMMAND_INSTR(0x56, 0x01),
+
+    ILI9881C_COMMAND_INSTR(0x57, 0x23),
+
+    ILI9881C_COMMAND_INSTR(0x58, 0x45),
+
+    ILI9881C_COMMAND_INSTR(0x59, 0x67),
+
+    ILI9881C_COMMAND_INSTR(0x5a, 0x89),
+
+    ILI9881C_COMMAND_INSTR(0x5b, 0xab),
+
+    ILI9881C_COMMAND_INSTR(0x5c, 0xcd),
+
+    ILI9881C_COMMAND_INSTR(0x5d, 0xef),
+
+    //GIP_3
+    ILI9881C_COMMAND_INSTR(0x5e, 0x11),
+
+    ILI9881C_COMMAND_INSTR(0x5f, 0x01),
+
+    ILI9881C_COMMAND_INSTR(0x60, 0x00),
+
+    ILI9881C_COMMAND_INSTR(0x61, 0x15),
+
+    ILI9881C_COMMAND_INSTR(0x62, 0x14),
+
+    ILI9881C_COMMAND_INSTR(0x63, 0x0E),
+
+    ILI9881C_COMMAND_INSTR(0x64, 0x0F),
+
+    ILI9881C_COMMAND_INSTR(0x65, 0x0C),
+
+    ILI9881C_COMMAND_INSTR(0x66, 0x0D),
+
+    ILI9881C_COMMAND_INSTR(0x67, 0x06),
+
+    ILI9881C_COMMAND_INSTR(0x68, 0x02),
+
+    ILI9881C_COMMAND_INSTR(0x69, 0x07),
+
+    ILI9881C_COMMAND_INSTR(0x6a, 0x02),
+
+    ILI9881C_COMMAND_INSTR(0x6b, 0x02),
+
+    ILI9881C_COMMAND_INSTR(0x6c, 0x02),
+
+    ILI9881C_COMMAND_INSTR(0x6d, 0x02),
+
+    ILI9881C_COMMAND_INSTR(0x6e, 0x02),
+
+    ILI9881C_COMMAND_INSTR(0x6f, 0x02),
+
+    ILI9881C_COMMAND_INSTR(0x70, 0x02),
+
+    ILI9881C_COMMAND_INSTR(0x71, 0x02),
+
+    ILI9881C_COMMAND_INSTR(0x72, 0x02),
+
+    ILI9881C_COMMAND_INSTR(0x73, 0x02),
+
+    ILI9881C_COMMAND_INSTR(0x74, 0x02),
+
+    ILI9881C_COMMAND_INSTR(0x75, 0x01),
+
+    ILI9881C_COMMAND_INSTR(0x76, 0x00),
+
+    ILI9881C_COMMAND_INSTR(0x77, 0x14),
+
+    ILI9881C_COMMAND_INSTR(0x78, 0x15),
+
+    ILI9881C_COMMAND_INSTR(0x79, 0x0E),
+
+    ILI9881C_COMMAND_INSTR(0x7a, 0x0F),
+
+    ILI9881C_COMMAND_INSTR(0x7b, 0x0C),
+
+    ILI9881C_COMMAND_INSTR(0x7c, 0x0D),
+
+    ILI9881C_COMMAND_INSTR(0x7d, 0x06),
+
+    ILI9881C_COMMAND_INSTR(0x7e, 0x02),
+
+    ILI9881C_COMMAND_INSTR(0x7f, 0x07),
+
+    ILI9881C_COMMAND_INSTR(0x80, 0x02),
+
+    ILI9881C_COMMAND_INSTR(0x81, 0x02),
+
+    ILI9881C_COMMAND_INSTR(0x83, 0x02),
+
+    ILI9881C_COMMAND_INSTR(0x84, 0x02),
+
+    ILI9881C_COMMAND_INSTR(0x85, 0x02),
+
+    ILI9881C_COMMAND_INSTR(0x86, 0x02),
+
+    ILI9881C_COMMAND_INSTR(0x87, 0x02),
+
+    ILI9881C_COMMAND_INSTR(0x88, 0x02),
+
+    ILI9881C_COMMAND_INSTR(0x89, 0x02),
+
+    ILI9881C_COMMAND_INSTR(0x8A, 0x02),
+    
+    //ILI9881C PAGE4
+    ILI9881C_SWITCH_PAGE_INSTR(0x4),
+
+    ILI9881C_COMMAND_INSTR(0x6C, 0x15),
+
+    ILI9881C_COMMAND_INSTR(0x6E, 0x2B),
+
+    ILI9881C_COMMAND_INSTR(0x6F, 0x33),
+
+    ILI9881C_COMMAND_INSTR(0x8D, 0x18),
+
+    ILI9881C_COMMAND_INSTR(0x87, 0xBA),
+
+    ILI9881C_COMMAND_INSTR(0x26, 0x76),
+
+    ILI9881C_COMMAND_INSTR(0xB2, 0xD1),
+
+    ILI9881C_COMMAND_INSTR(0xB5, 0x06),
+
+    ILI9881C_COMMAND_INSTR(0x3A, 0x24),
+
+    ILI9881C_COMMAND_INSTR(0x35, 0x1F),
+
+    //ILI9881C PAGE1
+    ILI9881C_SWITCH_PAGE_INSTR(0x1),
+
+    ILI9881C_COMMAND_INSTR(0x22, 0x09),
+
+    ILI9881C_COMMAND_INSTR(0x31, 0x00),
+
+    ILI9881C_COMMAND_INSTR(0x40, 0x33),
+
+    ILI9881C_COMMAND_INSTR(0x53, 0xA3),
+
+    ILI9881C_COMMAND_INSTR(0x55, 0x92),
+
+    ILI9881C_COMMAND_INSTR(0x50, 0x96),
+
+    ILI9881C_COMMAND_INSTR(0x51, 0x96),
+
+    ILI9881C_COMMAND_INSTR(0x60, 0x22),
+
+    ILI9881C_COMMAND_INSTR(0x61, 0x00),
+
+    ILI9881C_COMMAND_INSTR(0x62, 0x19),
+
+    ILI9881C_COMMAND_INSTR(0x63, 0x00),
+
+    //---P-GAMMA START---
+    ILI9881C_COMMAND_INSTR(0xA0, 0x08),
+
+    ILI9881C_COMMAND_INSTR(0xA1, 0x11),
+
+    ILI9881C_COMMAND_INSTR(0xA2, 0x19),
+
+    ILI9881C_COMMAND_INSTR(0xA3, 0x0D),
+
+    ILI9881C_COMMAND_INSTR(0xA4, 0x0D),
+
+    ILI9881C_COMMAND_INSTR(0xA5, 0x1E),
+
+    ILI9881C_COMMAND_INSTR(0xA6, 0x14),
+
+    ILI9881C_COMMAND_INSTR(0xA7, 0x17),
+
+    ILI9881C_COMMAND_INSTR(0xA8, 0x4F),
+
+    ILI9881C_COMMAND_INSTR(0xA9, 0x1A),
+
+    ILI9881C_COMMAND_INSTR(0xAA, 0x27),
+
+    ILI9881C_COMMAND_INSTR(0xAB, 0x49),
+
+    ILI9881C_COMMAND_INSTR(0xAC, 0x1A),
+
+    ILI9881C_COMMAND_INSTR(0xAD, 0x18),
+
+    ILI9881C_COMMAND_INSTR(0xAE, 0x4C),
+
+    ILI9881C_COMMAND_INSTR(0xAF, 0x22),
+
+    ILI9881C_COMMAND_INSTR(0xB0, 0x27),
+
+    ILI9881C_COMMAND_INSTR(0xB1, 0x4B),
+
+    ILI9881C_COMMAND_INSTR(0xB2, 0x60),
+
+    ILI9881C_COMMAND_INSTR(0xB3, 0x39),
+
+    ILI9881C_COMMAND_INSTR(0xC0, 0x08),
+
+    ILI9881C_COMMAND_INSTR(0xC1, 0x11),
+
+    ILI9881C_COMMAND_INSTR(0xC2, 0x19),
+
+    ILI9881C_COMMAND_INSTR(0xC3, 0x0D),
+
+    ILI9881C_COMMAND_INSTR(0xC4, 0x0D),
+
+    ILI9881C_COMMAND_INSTR(0xC5, 0x1E),
+
+    ILI9881C_COMMAND_INSTR(0xC6, 0x14),
+
+    ILI9881C_COMMAND_INSTR(0xC7, 0x17),
+
+    ILI9881C_COMMAND_INSTR(0xC8, 0x4F),
+
+    ILI9881C_COMMAND_INSTR(0xC9, 0x1A),
+
+    ILI9881C_COMMAND_INSTR(0xCA, 0x27),
+
+    ILI9881C_COMMAND_INSTR(0xCB, 0x49),
+
+    ILI9881C_COMMAND_INSTR(0xCC, 0x1A),
+
+    ILI9881C_COMMAND_INSTR(0xCD, 0x18),
+
+    ILI9881C_COMMAND_INSTR(0xCE, 0x4C),
+
+    ILI9881C_COMMAND_INSTR(0xCF, 0x33),
+
+    ILI9881C_COMMAND_INSTR(0xD0, 0x27),
+
+    ILI9881C_COMMAND_INSTR(0xD1, 0x4B),
+
+    ILI9881C_COMMAND_INSTR(0xD2, 0x60),
+
+    ILI9881C_COMMAND_INSTR(0xD3, 0x39),
+
+    //ILI9881C PAGE0
+    ILI9881C_SWITCH_PAGE_INSTR(0x00),
+
+	ILI9881C_COMMAND_INSTR(0x11, 0x00),
+    
+    ILI9881C_COMMAND_INSTR(0x35, 0x00),
+    ILI9881C_COMMAND_INSTR(0x36, 0x03),
+    ILI9881C_COMMAND_INSTR(0x29, 0x00),
+};
+
 static inline struct ili9881c *panel_to_ili9881c(struct drm_panel *panel)
 {
 	return container_of(panel, struct ili9881c, panel);
@@ -501,8 +897,9 @@ static int ili9881c_prepare(struct drm_panel *panel)
 
 	/* Power the panel */
 	ret = regulator_enable(ctx->power);
-	if (ret)
+	if (ret){
 		return ret;
+	}
 	msleep(5);
 
 	/* And reset it */
@@ -515,27 +912,50 @@ static int ili9881c_prepare(struct drm_panel *panel)
 	for (i = 0; i < ctx->desc->init_length; i++) {
 		const struct ili9881c_instr *instr = &ctx->desc->init[i];
 
-		if (instr->op == ILI9881C_SWITCH_PAGE)
+		if (instr->op == ILI9881C_SWITCH_PAGE){
 			ret = ili9881c_switch_page(ctx, instr->arg.page);
-		else if (instr->op == ILI9881C_COMMAND)
+		}
+		else if (instr->op == ILI9881C_COMMAND){
 			ret = ili9881c_send_cmd_data(ctx, instr->arg.cmd.cmd,
 						      instr->arg.cmd.data);
+		}
 
-		if (ret)
+		if (ret){
 			return ret;
+		}
 	}
 
 	ret = ili9881c_switch_page(ctx, 0);
-	if (ret)
+	
+	if (ret){
 		return ret;
+	}
 
-	ret = mipi_dsi_dcs_set_tear_on(ctx->dsi, MIPI_DSI_DCS_TEAR_MODE_VBLANK);
-	if (ret)
+	ret = mipi_dsi_dcs_exit_sleep_mode(ctx->dsi);
+	if (ret){
 		return ret;
+	}
 
-	ret = mipi_dsi_dcs_exit_sleep_mode(ctx->dsi);
-	if (ret)
+	msleep(120);
+
+	ret = mipi_dsi_dcs_set_tear_off(ctx->dsi);
+	if (ret){
+		return ret;
+	}
+
+	ret = ili9881c_send_cmd_data(ctx, 0x36, 0x03);
+	if (ret){
+		return ret;
+	}
+
+	ret = ili9881c_send_cmd_data(ctx, 0x29, 0x00);
+	if (ret){
 		return ret;
+	}
+
+	ctx->prepared = true;
+	
+	msleep(20);
 
 	return 0;
 }
@@ -603,12 +1023,28 @@ static const struct drm_display_mode k101_im2byl02_default_mode = {
 	.height_mm	= 217,
 };
 
+static const struct drm_display_mode WF50DTYA3MNG10_default_mode = {
+        .clock          = 55000,
+
+        .hdisplay       = 720,
+        .hsync_start    = 720 + 20,
+        .hsync_end      = 720 + 20 + 1,
+        .htotal         = 720 + 20 + 1 + 20,
+
+        .vdisplay       = 1280,
+        .vsync_start    = 1280 + 10,
+        .vsync_end      = 1280 + 10 + 2,
+        .vtotal         = 1280 + 10 + 2 + 15,
+
+        .width_mm       = 111,
+        .height_mm      = 193,
+};
+
 static int ili9881c_get_modes(struct drm_panel *panel,
 			      struct drm_connector *connector)
 {
 	struct ili9881c *ctx = panel_to_ili9881c(panel);
 	struct drm_display_mode *mode;
-
 	mode = drm_mode_duplicate(connector->dev, ctx->desc->mode);
 	if (!mode) {
 		dev_err(&ctx->dsi->dev, "failed to add mode %ux%ux@%u\n",
@@ -617,12 +1053,10 @@ static int ili9881c_get_modes(struct drm_panel *panel,
 			drm_mode_vrefresh(ctx->desc->mode));
 		return -ENOMEM;
 	}
-
 	drm_mode_set_name(mode);
 
 	mode->type = DRM_MODE_TYPE_DRIVER | DRM_MODE_TYPE_PREFERRED;
 	drm_mode_probed_add(connector, mode);
-
 	connector->display_info.width_mm = mode->width_mm;
 	connector->display_info.height_mm = mode->height_mm;
 
@@ -653,16 +1087,14 @@ static int ili9881c_dsi_probe(struct mipi_dsi_device *dsi)
 		       DRM_MODE_CONNECTOR_DSI);
 
 	ctx->power = devm_regulator_get(&dsi->dev, "power");
-	if (IS_ERR(ctx->power)) {
-		dev_err(&dsi->dev, "Couldn't get our power regulator\n");
-		return PTR_ERR(ctx->power);
-	}
+	if (IS_ERR(ctx->power))
+		return dev_err_probe(&dsi->dev, PTR_ERR(ctx->power),
+				     "Couldn't get our power regulator\n");
 
-	ctx->reset = devm_gpiod_get(&dsi->dev, "reset", GPIOD_OUT_LOW);
-	if (IS_ERR(ctx->reset)) {
-		dev_err(&dsi->dev, "Couldn't get our reset GPIO\n");
-		return PTR_ERR(ctx->reset);
-	}
+	ctx->reset = devm_gpiod_get_optional(&dsi->dev, "reset", GPIOD_OUT_LOW);
+	if (IS_ERR(ctx->reset))
+		return dev_err_probe(&dsi->dev, PTR_ERR(ctx->reset),
+				     "Couldn't get our reset GPIO\n");
 
 	ret = drm_panel_of_backlight(&ctx->panel);
 	if (ret)
@@ -670,11 +1102,19 @@ static int ili9881c_dsi_probe(struct mipi_dsi_device *dsi)
 
 	drm_panel_add(&ctx->panel);
 
-	dsi->mode_flags = MIPI_DSI_MODE_VIDEO_SYNC_PULSE;
+	dsi->lanes = 2;
 	dsi->format = MIPI_DSI_FMT_RGB888;
-	dsi->lanes = 4;
+	/*dsi->mode_flags = MIPI_DSI_MODE_VIDEO | MIPI_DSI_MODE_VIDEO_BURST | MIPI_DSI_MODE_LPM, MIPI_DSI_CLOCK_NON_CONTINUOUS;*/
+	dsi->mode_flags = MIPI_DSI_MODE_VIDEO | MIPI_DSI_MODE_VIDEO_BURST | MIPI_DSI_MODE_LPM;
+	/*dsi->mode_flags = MIPI_DSI_MODE_VIDEO_SYNC_PULSE | MIPI_DSI_MODE_LPM;*/
+
+	ret = mipi_dsi_attach(dsi);
+	if (ret < 0) {
+		drm_panel_remove(&ctx->panel);
+		return ret;
+	}
 
-	return mipi_dsi_attach(dsi);
+	return 0;
 }
 
 static int ili9881c_dsi_remove(struct mipi_dsi_device *dsi)
@@ -699,9 +1139,16 @@ static const struct ili9881c_desc k101_im2byl02_desc = {
 	.mode = &k101_im2byl02_default_mode,
 };
 
+static const struct ili9881c_desc WF50DTYA3MNG10_desc = {
+        .init = WF50DTYA3MNG10_init,
+        .init_length = ARRAY_SIZE(WF50DTYA3MNG10_init),
+        .mode = &WF50DTYA3MNG10_default_mode,
+};
+
 static const struct of_device_id ili9881c_of_match[] = {
 	{ .compatible = "bananapi,lhr050h41", .data = &lhr050h41_desc },
 	{ .compatible = "feixin,k101-im2byl02", .data = &k101_im2byl02_desc },
+	{ .compatible = "winstar,WF50DTYA3MNG10", .data = &WF50DTYA3MNG10_desc },
 	{ }
 };
 MODULE_DEVICE_TABLE(of, ili9881c_of_match);
